apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-dev
  labels:
    app: grafana
    component: frontend
    env: dev
    app.kubernetes.io/part-of: grafana-dev
    app.kubernetes.io/instance: grafana-enterprise
    app.kubernetes.io/version: 10.4.1
    app.kubernetes.io/managed-by: oc
    app.openshift.io/runtime: Go
spec:
  replicas: 2
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        deployment: grafana-dev
        app: grafana
        component: frontend
        env: dev
    spec:
      containers:
        - name: grafana
          image: docker.io/grafana/grafana-enterprise:latest # Use a specific version if needed
          imagePullPolicy: ifNotPresent
          ports:
            - containerPort: 3000

          resources:
            requests:
              cpu: 50m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi

          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 20
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10

          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana

      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc-dev

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: grafana-pvc-dev
spec:
  accessModes:
    - ReadWriteOnce # Adjust based on storage provider
  storageClassName: standard  # Replace if not using the default 
  resources:
    requests:
      storage: 2Gi 

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-dev
  labels:
    app: grafana
    env: dev
spec:
  selector:
    app: grafana 
    component: frontend
    env: dev
  ports:
    - protocol: TCP
      port: 80 
      targetPort: 3000
  type: ClusterIP  

